# File: manager.py (Solusi Sederhana & Stabil)

import subprocess
import time
import os
import signal
import rospkg

class RosManager:
    def __init__(self, status_callback):
        self.roscore_process = None
        self.controller_process = None
        self.mapping_process = None
        
        self.is_controller_running = False
        self.is_mapping_running = False
        
        self.status_callback = status_callback
        self.rospack = rospkg.RosPack()
        
        self.start_roscore()
        print("INFO: RosManager siap.")

    def start_roscore(self):
        # Cek apakah roscore sudah berjalan
        try:
            subprocess.check_output(["pidof", "roscore"])
            print("INFO: roscore sudah berjalan.")
        except subprocess.CalledProcessError:
            print("INFO: Memulai roscore di latar belakang...")
            try:
                # Jalankan roscore sebagai proses terpisah
                self.roscore_process = subprocess.Popen("roscore", preexec_fn=os.setsid)
                time.sleep(4) # Beri waktu agar roscore siap sepenuhnya
                print("INFO: roscore seharusnya sudah aktif.")
            except Exception as e:
                print(f"FATAL: Gagal memulai roscore: {e}")

    def _stop_process_group(self, process, name):
        """Fungsi untuk menghentikan seluruh grup proses yang diluncurkan oleh roslaunch."""
        if process and process.poll() is None: # Cek apakah proses masih berjalan
            try:
                pgid = os.getpgid(process.pid)
                os.killpg(pgid, signal.SIGTERM)
                process.wait(timeout=5)
                print(f"INFO: Grup proses '{name}' berhasil dihentikan.")
            except (ProcessLookupError, subprocess.TimeoutExpired, OSError) as e:
                print(f"WARN: Gagal menghentikan '{name}' dengan normal: {e}. Mungkin sudah berhenti.")
        else:
             print(f"INFO: Proses '{name}' memang tidak perlu dihentikan.")
        return None

    def start_controller(self):
        if not self.is_controller_running:
            command = "roslaunch my_robot_pkg controller.launch"
            self.controller_process = subprocess.Popen(command, shell=True, preexec_fn=os.setsid)
            self.is_controller_running = True
            print("INFO: Mode Controller dimulai.")
            return "Status: AKTIF"
        return "Status: Sudah Aktif"

    def stop_controller(self):
        if self.is_controller_running:
            self.controller_process = self._stop_process_group(self.controller_process, "Controller")
            self.is_controller_running = False
        return "Status: DIMATIKAN"

    def start_mapping(self):
        if not self.is_mapping_running:
            command = "roslaunch autonomus_mobile_robot mapping.launch"
            self.mapping_process = subprocess.Popen(command, shell=True, preexec_fn=os.setsid)
            self.is_mapping_running = True
            print("INFO: Mode Mapping dimulai.")
            self.start_controller()
            return "Mode Pemetaan AKTIF.\nController juga aktif."
        return "Status: Mapping Sudah Aktif"

    def stop_mapping(self):
        if self.is_mapping_running:
            self.mapping_process = self._stop_process_group(self.mapping_process, "Mapping")
            self.is_mapping_running = False
            self.stop_controller()
        return "Status: DIMATIKAN"

    # --- INI ADALAH FUNGSI YANG DIPERBAIKI ---
    def save_map(self, map_name):
        if not map_name.strip():
            print("ERROR: Nama peta tidak boleh kosong.")
            return False

        try:
            # Dapatkan path paket tujuan untuk menyimpan peta
            pkg_path = self.rospack.get_path('autonomus_mobile_robot')
            map_save_path = os.path.join(pkg_path, 'maps', map_name)
            
            command = f"rosrun map_server map_saver -f {map_save_path}"
            
            print(f"INFO: Menjalankan perintah di latar belakang: {command}")
            
            # Jalankan perintah sebagai proses baru yang benar-benar terpisah
            # Popen tidak memblokir, GUI akan tetap berjalan normal.
            subprocess.Popen(command, shell=True)
            
            print("INFO: Perintah simpan peta telah dikirim.")
            return True
        except rospkg.ResourceNotFound:
            print("ERROR: Paket 'autonomus_mobile_robot' tidak ditemukan.")
            return False
        except Exception as e:
            print(f"ERROR: Terjadi kesalahan saat mencoba menyimpan peta: {e}")
            return False

    def shutdown(self):
        print("INFO: Shutdown dipanggil, menghentikan semua proses...")
        self.stop_mapping() # Ini sudah mencakup stop_controller
        
        if self.roscore_process:
            print("INFO: Menghentikan roscore...")
            self.roscore_process = self._stop_process_group(self.roscore_process, "roscore")
