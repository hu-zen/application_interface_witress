# File: manager.py (Solusi Final dengan Skrip Jembatan)

import subprocess
import time
import os
import signal
import rospkg

class RosManager:
    def __init__(self, status_callback):
        self.ros_launcher_script_path = None
        self.rospack = rospkg.RosPack()
        try:
            # Cari path skrip jembatan kita saat inisialisasi
            pkg_path = self.rospack.get_path('waiterbot_interface')
            self.ros_launcher_script_path = os.path.join(pkg_path, 'scripts', 'ros_launcher.py')
        except rospkg.ResourceNotFound:
            print("FATAL: Paket 'waiterbot_interface' tidak ditemukan!")
            # Tampilkan error di GUI jika bisa
            status_callback("main_menu", "status_label", "FATAL: Paket 'waiterbot_interface' tidak ditemukan!")
        
        self.status_callback = status_callback
        print("INFO: RosManager siap.")

    # TIDAK PERLU LAGI MENGELOLA PROSES ROSSECRA MANUAL
    # Fungsi start_roscore, _monitor_processes, _stop_process_group, start/stop_controller, start/stop_mapping
    # bisa dihapus atau dikomentari karena sekarang semua dikelola oleh roslaunch di terminal terpisah.
    
    # KITA BUAT FUNGSI BARU YANG LEBIH SEDERHANA
    
    def start_mapping(self, map_name):
        if not self.ros_launcher_script_path: return "GAGAL: Skrip jembatan tidak ditemukan."
        
        # Perintah untuk memanggil skrip jembatan agar menjalankan mapping.launch
        command = [self.ros_launcher_script_path, 'launch', 'autonomus_mobile_robot', 'mapping.launch']
        try:
            subprocess.Popen(command)
            # Simpan nama peta untuk nanti
            self.current_map_name = map_name
            return "Terminal mapping dibuka..."
        except Exception as e:
            print(f"Error saat memulai mapping: {e}")
            return "Gagal memulai mapping."

    def save_and_stop_mapping(self):
        if not self.ros_launcher_script_path: return "GAGAL: Skrip jembatan tidak ditemukan."
        if not self.current_map_name: return "GAGAL: Nama peta tidak ada."

        try:
            # Dapatkan path tujuan penyimpanan
            robot_pkg_path = self.rospack.get_path('autonomus_mobile_robot')
            map_save_path = os.path.join(robot_pkg_path, 'maps', self.current_map_name)

            # Perintah untuk memanggil skrip jembatan agar menyimpan peta
            command = [self.ros_launcher_script_path, 'save', map_save_path]
            subprocess.Popen(command)
            
            # Matikan SEMUA node ros dengan `rosnode kill -a`
            # Ini cara yang paling ampuh untuk mematikan semuanya, termasuk RViz.
            # Kita jalankan juga via skrip jembatan agar environment-nya benar.
            kill_command = 'gnome-terminal -- bash -c "source ~/catkin_ws/devel/setup.bash; rosnode kill -a; echo \'Semua node ROS telah dihentikan.\'; sleep 3; exit"'
            subprocess.Popen(kill_command, shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

            return "Menyimpan peta & mematikan semua node..."
        except Exception as e:
            print(f"Error saat menyimpan/menghentikan: {e}")
            return "Gagal menyimpan/menghentikan."

    def shutdown(self):
        print("INFO: Aplikasi ditutup. Menghentikan semua node ROS...")
        # Jalankan perintah kill all nodes saat aplikasi ditutup untuk memastikan tidak ada yang tersisa
        kill_command = 'gnome-terminal -- bash -c "source ~/catkin_ws/devel/setup.bash; rosnode kill -a; echo \'Semua node ROS telah dihentikan.\'; sleep 3; exit"'
        subprocess.Popen(kill_command, shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
