# File: manager.py (Final, Stabil, dan Terisolasi)

import subprocess
import threading
import time
import os
import signal
import rospy
from waiterbot_interface.srv import SaveMap, SaveMapRequest

class RosManager:
    def __init__(self, status_callback):
        self.roscore_process = None
        self.controller_process = None
        self.mapping_process = None
        self.is_controller_running = False
        self.is_mapping_running = False
        self.status_callback = status_callback
        
        self.start_roscore()
        
        try:
            rospy.init_node('kivy_ros_manager_node', anonymous=True)
            print("INFO: Node ROS untuk Kivy berhasil diinisialisasi.")
        except rospy.exceptions.ROSInitException:
            print("INFO: Node ROS Kivy sudah ada.")
        
        print("INFO: RosManager siap.")

    def start_roscore(self):
        try:
            subprocess.check_output(["pidof", "roscore"])
            print("INFO: roscore sudah berjalan.")
        except subprocess.CalledProcessError:
            print("INFO: Memulai roscore di latar belakang...")
            try:
                self.roscore_process = subprocess.Popen("roscore", preexec_fn=os.setsid)
                time.sleep(4)
                print("INFO: roscore seharusnya sudah aktif.")
            except Exception as e:
                print(f"FATAL: Gagal memulai roscore: {e}")

    def _stop_process_group(self, process, name):
        if process and process.poll() is None:
            try:
                pgid = os.getpgid(process.pid)
                os.killpg(pgid, signal.SIGTERM)
                process.wait(timeout=5)
                print(f"INFO: Grup proses '{name}' berhasil dihentikan.")
            except (ProcessLookupError, subprocess.TimeoutExpired, OSError) as e:
                print(f"WARN: Gagal menghentikan '{name}' dengan normal: {e}.")
        return None

    def start_controller(self):
        if not self.is_controller_running:
            command = "roslaunch my_robot_pkg controller.launch"
            self.controller_process = subprocess.Popen(command, shell=True, preexec_fn=os.setsid)
            self.is_controller_running = True
            print("INFO: Mode Controller dimulai.")
            return "Status: AKTIF"
        return "Status: Sudah Aktif"

    def stop_controller(self):
        if self.is_controller_running:
            self.controller_process = self._stop_process_group(self.controller_process, "Controller")
            self.is_controller_running = False
        return "Status: DIMATIKAN"

    def start_mapping(self):
        if not self.is_mapping_running:
            # MEMANGGIL LAUNCH FILE BARU DARI PAKET INTERFACE
            command = "roslaunch waiterbot_interface interface_mapping.launch"
            self.mapping_process = subprocess.Popen(command, shell=True, preexec_fn=os.setsid)
            self.is_mapping_running = True
            print("INFO: Mode Mapping dimulai (via interface_mapping.launch).")
            self.start_controller()
            return "Mode Pemetaan AKTIF.\nController juga aktif."
        return "Status: Mapping Sudah Aktif"

    def stop_mapping(self):
        if self.is_mapping_running:
            self.mapping_process = self._stop_process_group(self.mapping_process, "Mapping")
            self.is_mapping_running = False
            self.stop_controller()
        return "Status: DIMATIKAN"

    def save_map(self, map_name):
        if not map_name.strip():
            msg = "GAGAL: Nama peta tidak boleh kosong."
            self.status_callback("mapping", "mapping_status_label", msg)
            return False

        self.status_callback("mapping", "mapping_status_label", f"Menyimpan peta '{map_name}'...")
        
        try:
            rospy.wait_for_service('save_map', timeout=5.0)
            save_map_client = rospy.ServiceProxy('save_map', SaveMap)
            
            # Panggil service dengan nama peta sebagai argumen
            response = save_map_client(map_name)
            
            if response.success:
                self.status_callback("mapping", "mapping_status_label", response.message)
                return True
            else:
                self.status_callback("mapping", "mapping_status_label", f"GAGAL: {response.message}")
                return False
        except (rospy.ServiceException, rospy.ROSException) as e:
            error_msg = f"GAGAL: Tidak dapat terhubung ke service. Pastikan mapping berjalan. Error: {e}"
            self.status_callback("mapping", "mapping_status_label", error_msg)
            return False
            
    def shutdown(self):
        print("INFO: Shutdown dipanggil, menghentikan semua proses...")
        self.stop_mapping()
        if self.roscore_process:
            self.roscore_process = self._stop_process_group(self.roscore_process, "roscore")
