# File: manager.py (Solusi Final dengan Terminal Baru)

import subprocess
import threading
import time
import os
import signal
import rospkg

class RosManager:
    def __init__(self, status_callback):
        self.roscore_process = None
        self.controller_process = None
        self.mapping_process = None
        
        self.is_controller_running = False
        self.is_mapping_running = False
        
        self.status_callback = status_callback
        self.rospack = rospkg.RosPack()
        
        self.start_roscore()
        
        # Monitor thread tetap berguna untuk mendeteksi jika launch file crash
        self.monitor_thread = threading.Thread(target=self._monitor_processes)
        self.monitor_thread.daemon = True
        self.monitor_thread.start()
        print("INFO: RosManager siap.")

    def start_roscore(self):
        if self.roscore_process is None or self.roscore_process.poll() is not None:
            print("INFO: Memulai roscore di latar belakang...")
            try:
                self.roscore_process = subprocess.Popen("roscore", preexec_fn=os.setsid, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                time.sleep(4)
                print("INFO: roscore seharusnya sudah berjalan.")
            except Exception as e:
                print(f"FATAL: Gagal memulai roscore: {e}")

    def _monitor_processes(self):
        # Kode monitor asli Anda sudah baik, kita pertahankan
        while True:
            if self.is_controller_running and self.controller_process and self.controller_process.poll() is not None:
                print("ERROR: Proses controller.launch berhenti tak terduga!")
                self.is_controller_running = False
                self.controller_process = None
                self.status_callback("controller", "controller_status_label", "Status: Gagal! Proses berhenti.")
            
            if self.is_mapping_running and self.mapping_process and self.mapping_process.poll() is not None:
                print("ERROR: Proses mapping.launch berhenti tak terduga!")
                self.is_mapping_running = False
                self.mapping_process = None
                self.is_controller_running = False # Matikan juga flag controller
                self.controller_process = None
                self.status_callback("mapping", "mapping_status_label", "Status: Gagal! Mapping berhenti.")
            
            time.sleep(1)

    def stop_process_group(self, process, name):
        if process and process.poll() is None:
            try:
                os.killpg(os.getpgid(process.pid), signal.SIGTERM)
                process.wait(timeout=5)
                print(f"INFO: Grup proses '{name}' berhasil dihentikan.")
            except (ProcessLookupError, subprocess.TimeoutExpired, OSError):
                print(f"WARN: Gagal menghentikan '{name}'. Mungkin sudah berhenti.")
        return None

    def start_controller(self):
        if not self.is_controller_running:
            command = "roslaunch my_robot_pkg controller.launch"
            self.controller_process = subprocess.Popen(command, shell=True, preexec_fn=os.setsid)
            self.is_controller_running = True
            print("INFO: Mode Controller dimulai.")
            return "Status: AKTIF"
        return "Status: Sudah Aktif"

    def stop_controller(self):
        if self.is_controller_running:
            self.controller_process = self.stop_process_group(self.controller_process, "Controller")
            self.is_controller_running = False
        return "Status: DIMATIKAN"

    def start_mapping(self):
        if not self.is_mapping_running:
            command = "roslaunch autonomus_mobile_robot mapping.launch"
            self.mapping_process = subprocess.Popen(command, shell=True, preexec_fn=os.setsid)
            self.is_mapping_running = True
            print("INFO: Mode Mapping dimulai.")
            self.start_controller()
            return "Mode Pemetaan AKTIF.\nController juga aktif."
        return "Status: Mapping Sudah Aktif"

    def stop_mapping(self):
        if self.is_mapping_running:
            self.mapping_process = self.stop_process_group(self.mapping_process, "Mapping")
            self.is_mapping_running = False
            self.stop_controller()
        return "Status: DIMATIKAN"

    # --- INI ADALAH FUNGSI KUNCI YANG DIPERBAIKI SESUAI IDE ANDA ---
    def save_map(self, map_name):
        if not map_name.strip():
            print("ERROR: Nama peta tidak boleh kosong.")
            return False

        try:
            # Dapatkan path paket tempat GUI berjalan untuk menemukan skrip helper
            interface_pkg_path = self.rospack.get_path('waiterbot_interface')
            script_path = os.path.join(interface_pkg_path, 'scripts', 'save_map_terminal.py')

            # Dapatkan path paket tempat peta akan disimpan
            robot_pkg_path = self.rospack.get_path('autonomus_mobile_robot')
            map_save_path = os.path.join(robot_pkg_path, 'maps', map_name)

            # Perintah untuk menjalankan skrip helper dengan argumen path peta
            command = [script_path, map_save_path]
            
            print(f"INFO: Memanggil skrip helper untuk membuka terminal baru...")
            
            # Popen tidak memblokir, ia hanya menjalankan skrip yang akan membuka terminal baru
            subprocess.Popen(command)
            
            print("INFO: Permintaan untuk membuka terminal simpan telah dikirim.")
            return True
        except rospkg.ResourceNotFound as e:
            print(f"ERROR: Paket tidak ditemukan: {e}")
            return False
        except Exception as e:
            print(f"ERROR: Gagal memanggil skrip simpan peta: {e}")
            return False

    def shutdown(self):
        print("INFO: Shutdown dipanggil, menghentikan semua proses...")
        self.stop_mapping()
        self.stop_controller()
        
        if self.roscore_process:
            print("INFO: Menghentikan roscore...")
            self.roscore_process = self.stop_process_group(self.roscore_process, "roscore")
